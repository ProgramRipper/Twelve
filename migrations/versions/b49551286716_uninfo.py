"""uninfo

迁移 ID: b49551286716
父迁移:
创建时间: 2025-07-12 15:39:36.388729

"""

from __future__ import annotations

from collections.abc import Sequence

import sqlalchemy as sa
from alembic import op

revision: str = "b49551286716"
down_revision: str | Sequence[str] | None = None
branch_labels: str | Sequence[str] | None = None
depends_on: str | Sequence[str] | None = "2e0c173949d3", "7d23eb54c6be"


session_columns = [
    "bot_id",
    "bot_type",
    "platform",
    "level",
    "id1",
    "id2",
    "id3",
]
Session = sa.table(  # nonebot_plugin_session_orm.SessionModel
    "nonebot_plugin_session_orm_sessionmodel",
    sa.column("id"),
    *map(sa.column, session_columns),
)
session_level_case = lambda private, group: sa.case(
    {
        1: private,  # nonebot_plugin_session.SessionLevel.LEVEL1
        2: group,  # nonebot_plugin_session.SessionLevel.LEVEL2
    },
    value=Session.c.level,
)

botmodel_columns = ["self_id", "adapter", "scope"]
BotModel = sa.table(  # nonebot_plugin_uninfo.orm.BotModel
    "nonebot_plugin_uninfo_botmodel", sa.column("id"), *map(sa.column, botmodel_columns)
)
bot_persist_id = (
    sa.select(BotModel.c.id).filter_by(self_id=Session.c.bot_id).scalar_subquery()
)

scenemodel_columns = ["bot_persist_id", "scene_id", "scene_type", "scene_data"]
SceneModel = sa.table(  # nonebot_plugin_uninfo.orm.SceneModel
    "nonebot_plugin_uninfo_scenemodel",
    sa.column("id"),
    *map(sa.column, scenemodel_columns),
)
scene_id = session_level_case(Session.c.id1, Session.c.id2)
scene_type = session_level_case(
    sa.literal(0),  # nonebot_plugin_uninfo.SceneType.PRIVATE
    sa.literal(1),  # nonebot_plugin_uninfo.SceneType.GROUP
)
scene_persist_id = (
    sa.select(SceneModel.c.id)
    .filter_by(bot_persist_id=bot_persist_id, scene_id=scene_id, scene_type=scene_type)
    .scalar_subquery()
)
scene_type_case = lambda private, group: sa.case(
    {
        0: private,  # nonebot_plugin_uninfo.SceneType.PRIVATE
        1: group,  # nonebot_plugin_uninfo.SceneType.GROUP
    },
    value=SceneModel.c.scene_type,
)

session_level = scene_type_case(
    sa.literal(1),  # nonebot_plugin_session.SessionLevel.PRIVATE
    sa.literal(2),  # nonebot_plugin_session.SessionLevel.GROUP
)
session_id2 = scene_type_case(sa.literal(None), SceneModel.c.scene_id)

usermodel_columns = ["bot_persist_id", "user_id", "user_data"]
UserModel = sa.table(  # nonebot_plugin_uninfo.orm.UserModel
    "nonebot_plugin_uninfo_usermodel",
    sa.column("id"),
    *map(sa.column, usermodel_columns),
)
user_persist_id = (
    sa.select(UserModel.c.id)
    .filter_by(bot_persist_id=bot_persist_id, user_id=Session.c.id1)
    .scalar_subquery()
)

sessionmodel_columns = ["bot_persist_id", "scene_persist_id", "user_persist_id"]
SessionModel = sa.table(  # nonebot_plugin_uninfo.orm.SessionModel
    "nonebot_plugin_uninfo_sessionmodel",
    sa.column("id"),
    *map(sa.column, sessionmodel_columns),
)


def upgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        sa.insert(BotModel).from_select(
            botmodel_columns,
            sa.select(
                Session.c.bot_id,
                sa.literal("Milky"),  # nonebot_plugin_uninfo.SupportAdapter.milky
                sa.literal("QQClient"),  # nonebot_plugin_uninfo.SupportScope.qq_client
            ).distinct(),
        )
    )
    op.execute(
        sa.insert(SceneModel).from_select(
            scenemodel_columns,
            sa.select(
                bot_persist_id,
                scene_id,
                scene_type,
                sa.text("'{}'"),
            ).distinct(),
        )
    )
    op.execute(
        sa.insert(UserModel).from_select(
            usermodel_columns,
            sa.select(
                bot_persist_id,
                Session.c.id1,
                sa.text("'{}'"),
            ).distinct(),
        )
    )
    op.execute(
        sa.insert(SessionModel).from_select(
            sessionmodel_columns,
            sa.select(
                bot_persist_id,
                scene_persist_id,
                user_persist_id,
            ).select_from(Session),
        )
    )
    # ### end Alembic commands ###


def downgrade(name: str = "") -> None:
    if name:
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(
        sa.insert(Session).from_select(
            session_columns,
            sa.select(
                BotModel.c.self_id,
                sa.literal("OneBot V11"),
                sa.literal("qq"),
                session_level,
                UserModel.c.user_id,
                session_id2,
                sa.literal(""),
            ).select_from(
                SessionModel.join(
                    BotModel, SessionModel.c.bot_persist_id == BotModel.c.id
                )
                .join(SceneModel, SessionModel.c.scene_persist_id == SceneModel.c.id)
                .join(UserModel, SessionModel.c.user_persist_id == UserModel.c.id)
            ),
        )
    )
    # ### end Alembic commands ###
